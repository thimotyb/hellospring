@Test
public void shouldProcessRegistration() throws Exception {

 // Imposta il mocking
 UserRepository mockRepository = mock(userRepository.class);
 User unsaved = new User("jbauer", "24hours", "Jack", "Bauer");
 User saved = new User(24L, "jbauer", "24hours", "Jack", "Bauer");
	when(mockRepository.save(unsaved)).thenReturn(saved);

  // Imposta il controller
  UserController controller = new UserController(mockRepository);
	MockMvc mockMvc = standaloneSetup(controller).build();
		
		mockMvc.perform(post("/user/register")
			.param("firstName", "Jack")
			.param("lastName", "Bauer")
			.param("username", "jbauer")
			.param("password", "24hours"))
			.andExpect(redirectedUrl("/user/jbauer"));
			
			verify(mockRepository, atLeastOnce()).save(unsaved);
}

// Bisogna creare interfaccia UserController con metodo save

// Bisogna creare una implementazione di UserCollectionController

// Bisogna fare in modo che il contesto Spring ne fornisce una implementazione
// per l'autowiring

// Impostiamo il controller

@Controller
@RequestMapping("/user")
public class UserController {

	private UserRepository userRepository;
	
	@Autowired
	public UserController(UserRepository userRepository) {
		this.userRepository = userRepository;
	}
	
	// Step 1: Form vuota da inserire
	//@RequestMapping(value="/register", method=GET)
	//	public String showRegistrationForm() {
	//	return "registerForm";
	//}
	
	// Step 1: Form vuota da inserire, una istanza vuota del bean User deve essere presente nel modello
	@RequestMapping(value="/register", method=GET)
		public String showRegistrationForm(Model model) {
		model.addAttribute(new User());
		return "registerForm";
	}
	
	// Step 2: Ho premuto submit e i dati arrivano in post
	@RequestMapping(value="/register", method=POST)
	public String processRegistration(User user) {
		userRepository.save(user);	
		return "redirect:/user/" + user.getUsername();
	}
	
	// Step 3: Risolvo URL dinamico a cui arrivo in get per mostrare utente
	@RequestMapping(value="/{username}", method=GET)
	public String showuserProfile(@PathVariable String username, Model model) {
		User user = userRepository.findByUsername(username);
		model.addAttribute(user);
		return "profile";
	}
}



// View di output del profilo /pages/profile.jsp
<h1>Your Profile</h1>
<c:out value="${user.username}" /><br/>
<c:out value="${user.firstName}" />
<c:out value="${user.lastName}" />

// View di input usando taglib SpringForm
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf"%>
<sf:form method="POST" commandName="user">
	First Name: <sf:input path="firstName" /><br/>
	Last Name: <sf:input path="lastName" /><br/>
	Email: <sf:input path="email" /><br/>
	Username: <sf:input path="username" /><br/>
	Password: <sf:password path="password" /><br/>
	<input type="submit" value="Register" />
</sf:form>

